#include "imports/helpers.fc";
#include "imports/lite-client-constants.fc";

(cell, cell, cell, int, int, int, int) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    cell prev_validator_set = ds~load_dict();
    cell cur_validator_set = ds~load_dict();
    cell next_validator_set = ds~load_dict();
    int utime_since = ds~load_uint(32);
    int utime_until = ds~load_uint(32);
    int seqno = ds~load_int(32);
    int blocks_workchain = ds~load_int(1);
    return (
        prev_validator_set,
        cur_validator_set,
        next_validator_set,
        utime_since,
        utime_until,
        seqno,
        blocks_workchain
    );
}

() save_data(cell prev_validator_set, cell cur_validator_set, cell next_validator_set, int utime_since, int utime_until, int seqno, int blocks_workchain) impure {
    set_data(
        begin_cell()
            .store_dict(prev_validator_set)
            .store_dict(cur_validator_set)
            .store_dict(next_validator_set)
            .store_uint(utime_since, 32)
            .store_uint(utime_until, 32)
            .store_int(seqno, 32)
            .store_int(blocks_workchain, 1)
            .end_cell()
    );
}

(int, int, int, int) parse_block_id(slice block_id_cs) inline {
    ;; int block_id_kind = block_id_cs~load_int(32);
    int block_id_workchain = block_id_cs~load_int(32);
    ;; int block_id_shard = block_id_cs~load_int(64);
    int block_id_seqno = block_id_cs~load_int(32);
    int block_id_root_hash = block_id_cs~load_uint(256);
    int block_id_file_hash = block_id_cs~load_uint(256);
    return (block_id_workchain, block_id_seqno, block_id_root_hash, block_id_file_hash);
}

(slice, int) verify_block_header(slice block_header_cs) impure inline {
    ;; int block_header_kind = block_header_cs~load_int(32);
    slice block_header_id_cs = block_header_cs~load_ref().begin_parse();
    ;; int block_header_mode = block_header_cs~load_uint(32);
    cell header_proof = block_header_cs~load_ref();  

    (_, _, int block_header_id_root_hash, _) = parse_block_id(block_header_id_cs);

    slice merkle_proof = verify_and_parse_merkle_proof_cell(header_proof);
    int root_hash = hash_at_level(merkle_proof~load_ref(), 0);
    throw_unless(0xf004, root_hash == merkle_proof~load_uint(256));
    throw_unless(0xf005, root_hash == block_header_id_root_hash);
    ~strdump("header root hash is ok");
    return (block_header_id_cs, root_hash);
}

(slice)  verify_and_parse_block_data(slice block_data_cs, slice block_header_id_cs) impure inline {
    ;; int block_data_kind = block_data_cs~load_int(32);
    ;; slice block_data_id_cs = block_data_cs~load_ref().begin_parse();
    cell block_data_c = block_data_cs~load_ref();

    ;; (int block_data_id_workchain, int block_data_id_seqno, int block_data_id_root_hash, int block_data_id_file_hash) = parse_block_id(block_data_id_cs);
    
    (_, _, int block_header_id_root_hash, _) = parse_block_id(block_header_id_cs);
    ;; throw_unless(0xf007, block_data_id_workchain == block_header_id_workchain);
    ;; throw_unless(0xf009, block_data_id_seqno == block_header_id_seqno);
    ;; throw_unless(0xf010, block_data_id_root_hash == block_header_id_root_hash);

    slice merkle_proof = verify_and_parse_merkle_proof_cell(block_data_c);
    cell merkle_proof_c = merkle_proof~load_ref();
    int root_hash = hash_at_level(merkle_proof_c, 0);
    throw_unless(0xf004, root_hash == merkle_proof~load_uint(256));
    throw_unless(0xf005, root_hash == block_header_id_root_hash);
    ~strdump("data root hash is ok");
    return (merkle_proof_c.begin_parse());

    ;; int block_data_root_hash = hash_at_level(block_data_c, 0);
    ;; throw_unless(0xf011, block_data_root_hash == block_header_id_root_hash);
    ;; ;; todo: check the hash with the first cell
    ;; ~strdump("data root hash is ok");
    ;; return (block_data_c.begin_parse());
}

(int, int) load_block_info(slice info) impure inline {
    int info_magic = info~load_uint(32);
    throw_unless(0xf013, info_magic == 0x9bc7a987); 
    
    ;; int version = info~load_uint(32);
    ;; int not_master = info~load_uint(1);
    ;; int after_merge = info~load_uint(1);
    ;; int before_split = info~load_uint(1);
    ;; int after_split = info~load_uint(1);
    ;; int want_split = info~load_uint(1);
    ;; int want_merge = info~load_uint(1);
    ;; int key_block = info~load_uint(1);
    ;; int vert_seqno_incr = info~load_uint(1);
    ;; int flags = info~load_uint(8);
    ;; if (flags > 1) {
    ;;     throw(0xf018);
    ;; }
    ;; int seq_no = info~load_uint(32);
    ;; ~dump(seq_no);
    ;; int vert_seq_no = info~load_uint(32);
    ;; if (vert_seqno_incr > vert_seq_no) {
    ;;     throw(0xf019);
    ;; }
    ;; int prev_seq_no = seq_no - 1;
    ;; int shard_ident = info~load_uint(2);
    ;; if (shard_ident != 0) {
    ;;     throw(0xf020);
    ;; }
    ;; int shard_pfx_bits = info~load_uint(6);
    ;; int shard_workchain = info~load_int(32);
    ;; int shard_prefix = info~load_uint(64);
    
    info~load_uint(32 + 8 + 8);
    int seq_no = info~load_uint(32);
    info~load_uint(32 + 2 + 6 + 32 + 64);
    int gen_utime = info~load_uint(32);
    
    return (gen_utime, seq_no);
}

(slice, int, int) load_block_data(slice block_data_cs) impure inline {
    int data_magic = block_data_cs~load_uint(32);
    throw_unless(0xf012, data_magic == 0x11ef55aa);

    int global_id = block_data_cs~load_int(32);
    slice info = block_data_cs~load_ref().begin_parse();
    (int gen_utime, int seq_no) = load_block_info(info);
    
    block_data_cs~load_ref(); ;; pruned value_flow
    block_data_cs~load_ref(); ;; pruned state_update

    return (block_data_cs, gen_utime, seq_no);
}

(cell, cell, cell, int) load_config_params(slice block_data_cs, int blocks_workchain) impure inline {
    throw_unless(error::not_a_key_block, slice_refs_empty?(block_data_cs) == 0);
    slice extra = block_data_cs~load_ref().begin_parse();
    extra~load_uint(32);
    extra~load_uint(256);   
    extra~load_uint(256);
    extra~load_ref();
    extra~load_ref();
    extra~load_ref();

    ;; extra~load_ref();
    ;; extra~load_ref();
    ;; extra~load_ref();

    slice mc_block_extra = extra~load_ref().begin_parse();
    mc_block_extra~load_uint(16);
    int is_key_block = mc_block_extra~load_uint(1);

    if (blocks_workchain == 0) {
        mc_block_extra~load_ref();
        mc_block_extra~load_ref();
        mc_block_extra~load_ref();
        ;; mc_block_extra~load_uint(75);
        ;; int config_address = mc_block_extra~load_uint(256);
    } elseif (blocks_workchain == -1) {
        mc_block_extra~load_ref();
        mc_block_extra~load_uint(11);
        mc_block_extra~load_uint(256);
    }

    if (is_key_block) {
        cell config_params = mc_block_extra~load_dict();
        (slice config_param_32, int success) = config_params.udict_get?(32, 32);
        throw_unless(0xf014, success);
        cell config_param_32_cs = config_param_32~load_ref();
        (slice config_param_34, int success) = config_params.udict_get?(32, 34);
        throw_unless(0xf014, success);
        cell config_param_34_cs = config_param_34~load_ref();
        (slice config_param_36, int success) = config_params.udict_get?(32, 36);
        cell config_param_36_cs = begin_cell().end_cell();
        if (success) {
            config_param_36_cs = config_param_36~load_ref();
        }
        return (config_param_32_cs, config_param_34_cs, config_param_36_cs, is_key_block);
    }
    ;; not a key block
    return (begin_cell().end_cell(), begin_cell().end_cell(), begin_cell().end_cell(), 0);
}

(cell, int, int) load_validator_set(slice config_param) impure inline {
    int param_type = config_param~load_uint(8);
    int utime_since = config_param~load_uint(32);
    int utime_until = config_param~load_uint(32);
    int total = config_param~load_uint(16);
    int main = config_param~load_uint(16);
    throw_unless(0xf015, total >= main);
    throw_unless(0xf015, main >= 1);

    cell validator_set = begin_cell().end_cell();
    if (param_type == 0x11) {
        validator_set = config_param~load_dict();
        return (validator_set, utime_since, utime_until);
    }
    if (param_type == 0x12) {
        config_param~load_uint(64);
        validator_set = config_param~load_dict();
        return (validator_set, utime_since, utime_until);
    }
    throw(error::unknown_param_type);
    return (validator_set, utime_since, utime_until);
}

(int, int, int) load_validator(slice validator) impure inline {
    int validator_type = validator~load_uint(8);
    throw_unless(0xf016, (validator_type == 0x53) | (validator_type == 0x73));
    throw_unless(0xf016, validator~load_uint(32) == 0x8e81278a);
    int pubkey = validator~load_uint(256);
    int weight = validator~load_uint(64);
    ;; if (validator_type == 0x73) {
    ;;     int adnl_addr = validator~load_uint(256);
    ;; }
    return (validator_type, pubkey, weight);
}

(int) sum_validator_weights(cell validator_set) impure inline {
    int sum = 0;
    (int key, slice value, int success) = validator_set.udict_get_min?(16);
    while (success) {
        (_, int pubkey, int weight) = load_validator(value);
        sum += weight;
        (key, value, success) = validator_set.udict_get_next?(16, key);
    }
    return (sum);
}

(int) get_validator_node_id(int pubkey) impure inline {
    int node_id_prefix = 0xc6b41348;
    int node_id = slice_hash_2(begin_cell().store_uint(node_id_prefix, 32).store_uint(pubkey, 256), begin_cell(), 2);
    return (node_id);
}

() verify_signatures(cell validator_set, cell signatures, slice message) impure inline {
    int total_weight = 0;
    int sum_total_weight = sum_validator_weights(validator_set);
    (int key, slice value, int success) = validator_set.udict_get_min?(16);
    
    while (success) {
        (_, int pubkey, int weight) = load_validator(value);
        int node_id = get_validator_node_id(pubkey);
        (slice signature, int exists) = signatures.udict_get?(256, node_id);
        if (exists) {
            slice signature_cs = signature~load_ref().begin_parse();
            int is_valid = check_signature_for_slice(message, signature_cs, pubkey);
            if (is_valid) {
                total_weight += weight;
            }
        }
        (key, value, success) = validator_set.udict_get_next?(16, key);
    }
    throw_unless(0xf017, total_weight > 0); 
    throw_unless(0xf018, total_weight > sum_total_weight * 2 / 3);
    ~strdump("block is verified");
    return ();
}

() update_current_epoch(cell config_param_32_cs, cell config_param_34_cs, cell config_param_36_cs, int gen_utime, int new_seqno) impure {
    (cell prev_validator_set, cell cur_validator_set, cell next_validator_set, int utime_since, int utime_until, int seqno, int blocks_workchain) = load_data();
    if (slice_data_empty?(config_param_36_cs.begin_parse())) {
        ;; This is the first key block in a new epoch, validation is done by cur_validator_set and validator set is updated
        (cell new_prev_validator_set, _, _) = load_validator_set(config_param_32_cs.begin_parse());
        (cell new_cur_validator_set, int new_utime_since, int new_utime_until) = load_validator_set(config_param_34_cs.begin_parse());
        throw_unless(0xf018, equal_slices_bits(new_cur_validator_set.begin_parse(), next_validator_set.begin_parse()));
        throw_unless(0xf019, equal_slices_bits(new_prev_validator_set.begin_parse(), cur_validator_set.begin_parse()));
        throw_unless(error::block_does_not_correspond_to_current_epoch, (blocks_workchain)?(new_utime_since <= gen_utime) & (new_utime_until > gen_utime):(new_utime_since < gen_utime) & (new_utime_until > gen_utime));
        save_data(new_prev_validator_set, new_cur_validator_set, begin_cell().end_cell(), new_utime_since, new_utime_until, new_seqno, blocks_workchain);
    } else {
        ;; This is a transitioning key block, validation is done by cur_validator_set and next validator set is updated
        (cell new_next_validator_set, _, _) = load_validator_set(config_param_36_cs.begin_parse());
        (cell new_cur_validator_set, _, _) = load_validator_set(config_param_34_cs.begin_parse());
        throw_unless(0xf021, equal_slices_bits(new_cur_validator_set.begin_parse(), cur_validator_set.begin_parse()));
        throw_unless(error::block_does_not_correspond_to_current_epoch, (blocks_workchain)?(utime_since < gen_utime) & (utime_until > gen_utime):(utime_since < gen_utime) & (utime_until >= gen_utime));
        save_data(prev_validator_set, cur_validator_set, new_next_validator_set, utime_since, utime_until, new_seqno, blocks_workchain);
    }
    ~strdump("current epoch is updated");
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {        
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    (cell prev_validator_set, cell cur_validator_set, cell next_validator_set, int utime_since, int utime_until, int seqno, int blocks_workchain) = load_data();

    ;; ~dump(slice_data_empty?(first_ref_slice));
    ;; ~dump(slice_refs_empty?(first_ref_slice));
    ;; ~dump(slice_bits(first_ref_slice));
    ;; ~dump(slice_refs(first_ref_slice));

    if (op == op::new_key_block) {
        int query_id = in_msg_body~load_uint(64);
        cell block = in_msg_body~load_ref();
        cell signatures = in_msg_body~load_dict();

        slice block_cs = block.begin_parse();
        slice block_header_cs = block_cs~load_ref().begin_parse();
        slice block_data_cs = block_cs~load_ref().begin_parse();

        (slice block_header_id_cs, int root_hash) = verify_block_header(block_header_cs);

        slice block_data = verify_and_parse_block_data(block_data_cs, block_header_id_cs);

        (block_data, int gen_utime, int seq_no) = load_block_data(block_data);
        (int block_header_id_workchain, int block_header_id_seqno, _, int block_header_id_file_hash) = parse_block_id(block_header_id_cs);
        throw_unless(0xf020, seq_no == block_header_id_seqno);
        throw_unless(0xf007, block_header_id_workchain == -1);

        (cell config_param_32_cs, cell config_param_34_cs, cell config_param_36_cs, int is_key_block) = load_config_params(block_data, blocks_workchain);
        throw_unless(error::not_a_key_block, is_key_block);
        
        slice message = begin_cell().store_uint(0x706e0bc5, 32).store_uint(root_hash, 256).store_uint(block_header_id_file_hash, 256).end_cell().begin_parse();

        verify_signatures(cur_validator_set, signatures, message);
        
        update_current_epoch(config_param_32_cs, config_param_34_cs, config_param_36_cs, gen_utime, block_header_id_seqno);

        var ok_msg_body = begin_cell()
                        .store_uint(op::ok, 32)
                        .store_uint(query_id, 64)
                        .store_uint(root_hash, 256)
                        .end_cell();
        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(ok_msg_body);
        send_raw_message(msg.end_cell(), 64);

        return ();
    }

    if (op == op::check_block) {
        int query_id = in_msg_body~load_uint(64);
        try {
            cell block = in_msg_body~load_ref();
            cell signatures = in_msg_body~load_ref();

            slice block_cs = block.begin_parse();
            slice block_header_cs = block_cs~load_ref().begin_parse();
            slice block_data_cs = block_cs~load_ref().begin_parse();

            (slice block_header_id_cs, int root_hash) = verify_block_header(block_header_cs);

            slice block_info = verify_and_parse_block_data(block_data_cs, block_header_id_cs);

            (_, int gen_utime, int seq_no) = load_block_data(block_info);
            (int block_header_id_workchain, int block_header_id_seqno, _, int block_header_id_file_hash) = parse_block_id(block_header_id_cs);
            throw_unless(0xf022, (blocks_workchain)?(gen_utime >= utime_since) & (gen_utime < utime_until):(gen_utime > utime_since) & (gen_utime <= utime_until));
            throw_unless(0xf023, seq_no == block_header_id_seqno);
            throw_unless(0xf007, block_header_id_workchain == -1);

            slice message = begin_cell().store_uint(0x706e0bc5, 32).store_uint(root_hash, 256).store_uint(block_header_id_file_hash, 256).end_cell().begin_parse();

            if (seqno == block_header_id_seqno) {
                if (slice_data_empty?(next_validator_set.begin_parse())) {
                    verify_signatures(prev_validator_set, signatures, message);
                } else {
                    verify_signatures(cur_validator_set, signatures, message);
                }
            } else {
                verify_signatures(cur_validator_set, signatures, message);
            }
            
            var correct_msg_body = begin_cell()
                            .store_uint(op::correct, 32)
                            .store_uint(query_id, 64)
                            .store_uint(root_hash, 256)
                            .end_cell();
            var msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(0)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(correct_msg_body);
            send_raw_message(msg.end_cell(), 64);
        } catch (x, n) {
            var reject_msg_body = begin_cell()
                            .store_uint(op::reject, 32)
                            .store_uint(query_id, 64)
                            .end_cell();
            var msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(0)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(reject_msg_body);
            send_raw_message(msg.end_cell(), 64);
        }

        return ();
    }

    throw(error::unknown_opcode);
}

(cell) get_prev_validator_set() method_id {
    (cell prev_validator_set, _, _, _, _, _, _) = load_data();
    return prev_validator_set;
}

(cell) get_cur_validator_set() method_id {
    (_, cell cur_validator_set, _, _, _, _, _) = load_data();
    return cur_validator_set;
}

(cell) get_next_validator_set() method_id {
    (_, _, cell next_validator_set, _, _, _, _) = load_data();
    return next_validator_set;
}

(int) get_utime_since() method_id {
    (_, _, _, int utime_since, _, _, _) = load_data();
    return utime_since;
}

(int) get_utime_until() method_id {
    (_, _, _, _, int utime_until, _, _) = load_data();
    return utime_until;
}

(int) get_seqno() method_id {
    (_, _, _, _, _, int seqno, _) = load_data();
    return seqno;
}

(int) get_blocks_workchain() method_id {
    (_, _, _, _, _, _, int blocks_workchain) = load_data();
    return blocks_workchain;
}

(cell, cell, cell, int, int, int, int) get_all_data() method_id {
    (cell prev_validator_set, cell cur_validator_set, cell next_validator_set, int utime_since, int utime_until, int seqno, int blocks_workchain) = load_data();
    return (prev_validator_set, cur_validator_set, next_validator_set, utime_since, utime_until, seqno, blocks_workchain);
}
